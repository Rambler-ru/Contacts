#ifndef RTPDATAHEADER_H
#define RTPDATAHEADER_H

// For 32bit intel machines

typedef short int16;
typedef int   int32;
typedef unsigned char u_int8;
typedef unsigned short u_int16;
typedef unsigned int u_int32;


/*
Ниже описана структура основного заголовка RTP. Длина 96 bit.
!!! ОСОБОЕ ВНИМАНИЕ ОБРАТИТЬ на тот факт что в разных системах (Big endian/Little endian) по разному следуют поля структуры
если упустить этот момент, то неправильно будет отправлятся пакет! Нарушится вся структура RTP пакета.

Следом идут CSRC-идентификаторы, если они есть. Кол-во идентификаторов определено в параметре cc.
Начало CSRC [start + 96].

Далее следует необязательный дополнительный заголовок определяющий длину блока данных (AHL). Параметр х
регулирет присутствие данного заголовка.
Его начало [start + 96 + cc*32].

И завершает пакет блок данных с началом [start + 96 + сс*32 + х*(AHL+16)]
??? по всей видимости длина AHL - 16 бит ???
*/
typedef struct RtpHeader
{
#ifdef RTP_BIG_ENDIAN
	uint8_t version:2;
	uint8_t padding:1;
	uint8_t extension:1;
	uint8_t csrccount:4;

	uint8_t marker:1;
	uint8_t payloadtype:7;
#else // Little endian
	u_int8 cc:4;              // Количество CSRC-идентификаторов, следующих за постоянным заголовком. 4 бита
	u_int8 x:1;               // Флаг использования расширений протокола. 1 бит
	u_int8 p:1;               // Флаг дополнения пустыми байтами на конце. 1 бит
	u_int8 version:2;         // Версия протокола (curr=2). 2 бита

	u_int8 pt:7;              // Формат полезной нагрузки
	u_int8 m:1;               // Используется на уровне приложения и определяется профилем. Если это поле установлено, то данные пакета имеют какое-то особое значение для приложения. 1 бит
#endif

	u_int16 seq;              // Порядковый номер 16 бит
	u_int32 ts;                     // Метка времени 32bits
	u_int32 ssrc;                   // Источник синхронизации

} rtp_hdr_t;

struct RtpPacket
{
	RtpHeader pHeader;
	int       iPayload;
	unsigned __int8  *pPayload;
	RtpPacket() : iPayload(0), pPayload(NULL) {}
	~RtpPacket() { if(pPayload) delete pPayload; }
};

#endif